plugins {
  id 'com.jfrog.bintray' version '1.7.3'
}
apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'com.jfrog.bintray'

def versionFile(extension) {
  return new File(sourceSets.main.resources.srcDirs[0].path + '/' + project.name + extension)
}

def getVersion(extension) {
  def versionFile = versionFile extension
  if (! versionFile.exists()) return '0'
  def reader = new BufferedReader(new FileReader(versionFile))
  def version = reader.readLine().trim()
  reader.close()
  return version
}

def setVersion(extension, version) {
  def versionFile = versionFile extension
  def writer = new BufferedWriter(new FileWriter(versionFile))
  writer.write(String.valueOf(version))
  writer.close()
}

def packageVersion = getVersion '.version'
def packageBuild = getVersion '.build'

task getBuild() {
  doLast {
    println "At ${getVersion('.version')}_${getVersion('.build')}"
  }
}

task setBuild() {
  doLast {
    def timestamp = new java.text.SimpleDateFormat('yyMMddHHmm').format(new Date())
    setVersion('.build', timestamp)
  }
}

group = 'com.obsidiandynamics.indigo'
version = packageVersion

def packageName = 'indigo-core'

repositories {
  jcenter()
  maven {
    url 'https://oss.sonatype.org/content/repositories/snapshots'
  }
}

dependencies {
  compile project(':indigo-commons')
  compile 'com.obsidiandynamics.fulcrum:fulcrum-assert:0.3.0'
  compile 'com.obsidiandynamics.fulcrum:fulcrum-version:0.3.0'
  
  testCompile project(':indigo-assurance')
  testCompile 'org.awaitility:awaitility:3.0.0'
}

test {
  include 'com/obsidiandynamics/indigo/CycledPrimaryTests.class'
  include 'com/obsidiandynamics/indigo/SupportingTests.class'
}

task testJar(type: Jar) {
  dependsOn configurations.compile
  dependsOn configurations.runtime
  dependsOn configurations.testCompile
  dependsOn jar
  manifest { 
    attributes "Main-Class": "com.obsidiandynamics.indigo.PrimaryTestsSoak"
  }
  from sourceSets.main.output
  from sourceSets.test.output
  from { // bundle all dependencies
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    configurations.testCompile.collect { it.isDirectory() ? it : zipTree(it) }
  }   
  baseName packageName + '-test'
}

jacoco {
  toolVersion = '0.7.10-SNAPSHOT'
}

jacocoTestReport {
  dependsOn test
  reports {
    xml.enabled false
    html.enabled true
  }
}

def perfJvmArgs = '-server -XX:+TieredCompilation -XX:+UseNUMA -XX:+UseCondCardMark -XX:-UseBiasedLocking -Xms1024M -Xmx2048M -Xss1M -XX:+UseParallelGC'

task testBench(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
  jvmArgs = Arrays.asList perfJvmArgs.split(' ')
  main = 'com.obsidiandynamics.indigo.BenchmarkSuite'
}

task testSoak(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
  jvmArgs = Arrays.asList perfJvmArgs.split(' ') + '-ea'
  standardInput = System.in
  main = 'com.obsidiandynamics.indigo.PrimaryTestsSoak'
}

def envUser = 'BINTRAY_USER'
def envKey = 'BINTRAY_KEY'
task bintrayCredentialsCheck {
  doLast {
    if (System.getenv(envUser) == null) {
      throw new GradleException("No Bintray username specified; set with 'export ${envUser}=<username>'")
    }
    if (System.getenv(envKey) == null) {
      throw new GradleException("No Bintray key specified; set with 'export ${envKey}=<key>'")
    }
  }
}

def packageDesc = 'A dynamic actor framework for the JVM'
bintray {
  user = System.getenv(envUser)
  key = System.getenv(envKey)
  publications = ['mavenJava']
  pkg {
    repo = 'indigo'
    name = packageName
    userOrg = 'obsidiandynamics'
    desc = packageDesc
    websiteUrl = 'https://github.com/obsidiandynamics/indigo'
    licenses = ['BSD New']
    vcsUrl = 'https://github.com/obsidiandynamics/indigo.git'
    publicDownloadNumbers = true
    githubRepo = 'obsidiandynamics/indigo'
    override = true
    publish = false
    version {
      name = packageVersion
      desc = packageDesc
      released  = new Date()
      vcsTag = packageVersion
    }
  }
}

// invoke this task when ready to publish to Bintray
bintrayUpload {
  dependsOn bintrayCredentialsCheck
}

processResources {
  dependsOn setBuild
}

jar {
  baseName packageName
  finalizedBy jacocoTestReport
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  baseName packageName
  classifier = 'javadoc'
  from "$buildDir/docs/javadoc"
}
 
task sourcesJar(type: Jar) {
  baseName packageName
  from sourceSets.main.allSource
  classifier = 'sources'
}
 
artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId group
      artifactId packageName
      version packageVersion
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
  repositories {
    maven {
      url "${project(':').projectDir}/../repo"
    }
  }
}